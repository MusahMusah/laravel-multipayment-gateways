<?php

namespace MusahMusah\LaravelMultipaymentGateways\Traits\Flutterwave;

use MusahMusah\LaravelMultipaymentGateways\Constants\FlutterwaveConstant;

trait TransactionTrait
{
    /**
     * Verify a transaction.
     *
     * This endpoint helps developers to query the final status of a transaction.
     * This can be used to check transactions of all payment types after they have been attempted.
     *
     * @param  string  $transactionId  The ID of the transaction to be verified.
     */
    public function verifyTransaction(string $transactionId): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT.$transactionId.'/verify'
        );
    }

    /**
     * Create a refund for a disputed transaction.
     *
     * @param  string  $transactionId  The ID of the transaction to be verified.
     * @param  array  $formParams  An associative array of refund data.
     */
    public function createTransactionRefund(string $transactionId, array $formParams = []): array
    {
        return $this->httpClient()->post(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT.$transactionId.'/refund',
            formParams: $formParams
        );
    }

    /**
     * Get multiple transactions
     *
     * @param  array  $queryParams  Query parameters for filtering and pagination
     */
    public function getTransactions(array $queryParams = []): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT,
            query: $queryParams
        );
    }

    /**
     * Get multiple refund transactions
     *
     * @param  array  $queryParams  Query parameters for filtering and pagination
     */
    public function getRefundTransactions(array $queryParams = []): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::REFUND_ENDPOINT,
            query: $queryParams
        );
    }

    /**
     * Get multiple refund transactions
     *
     * @param  string  $refundId  This is a unique reference for the refunded transaction
     */
    public function getRefundDetails(string $refundId): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::REFUND_ENDPOINT.$refundId
        );
    }

    /**
     * Get the transaction fees for a particular amount and currency
     *
     * @param  array  $queryParams  Query parameters for filtering
     */
    public function getTransactionFee(array $queryParams): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT.'fee',
            query: $queryParams
        );
    }

    /**
     * Resend failed webhooks to your server for a specific transaction.
     *
     * @param  string  $transactionId  This is a unique reference for the refunded transaction
     * @param  array  $formParams  An associative array of retry data.
     */
    public function resendFailedWebhook(string $transactionId, array $formParams = []): array
    {
        return $this->httpClient()->post(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT.$transactionId.'/resend-hook',
            formParams: $formParams
        );
    }

    /**
     * View transaction timeline
     *
     * @param  string  $transactionId  This is a unique transaction identifier generated by our systems
     */
    public function viewTransactionTimeline(string $transactionId): array
    {
        return $this->httpClient()->get(
            url: FlutterwaveConstant::TRANSACTION_ENDPOINT.$transactionId.'/timeline'
        );
    }
}
